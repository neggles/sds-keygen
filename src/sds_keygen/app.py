from datetime import datetime
from pathlib import Path
from typing import Optional

import typer
from rich import box
from rich.console import Console
from rich.table import Table
from rich.text import Text

from sds_keygen import __version__
from sds_keygen.console import console, err_console
from sds_keygen.keygen import ModelId, Options, generate_key

app = typer.Typer()
OPTS = Options()


def version_cb(value: bool):
    if value:
        console.print(f"{__package__} v{__version__}")
        raise typer.Exit()


@app.callback()
def callback(
    version: Optional[bool] = typer.Option(
        None, "--version", "-v", callback=version_cb, is_eager=True, is_flag=True, help="Show version"
    ),
):
    return


@app.command()
def gen_keys(
    ctx: typer.Context,
    save: bool = typer.Option(
        False,
        "--save",
        "-s",
        help="Save generated keys to file",
        is_flag=True,
    ),
    model_id: ModelId = typer.Option(
        default=ModelId.sds2000x_plus,
        help="Model ID (from 'MD5_PR?' SCIP command)",
    ),
    scope_id: str = typer.Argument(
        default="0000-0000-0000-0000",
        help="Scope ID (eg 1234-5678-abcd-ef01, with or without dashes)",
        show_default=False,
    ),
    outfile: Optional[Path] = typer.Argument(
        None,
        help="Path to save generated keys to (default: ./keys-<scope_id>.txt)",
        show_default=False,
    ),
):
    """
    Generate keys for a particular scope ID
    """
    if outfile is not None:
        save = True
    elif save:
        outfile = Path(f"keys-{scope_id}.txt")

    console.print(f"Generating keys for scope ID {scope_id}")
    if save:
        console.print(f"Will save keys to file: {outfile}")

    key_table = Table(
        title=f"Keys for scope ID {scope_id}",
        box=box.ROUNDED,
    )
    key_table.add_column("Group", style="cyan")
    key_table.add_column("Name", style="green")
    key_table.add_column("Code", style="magenta")
    key_table.add_column("Key", style="red")

    last_group = None
    for option in OPTS.All:
        if option.group != last_group:
            key_table.add_section()
            last_group = option.group
        key = generate_key(model_id, scope_id, option.code)
        key_table.add_row(option.group, option.name, option.code, key)

    console.print("")
    console.print(key_table)

    if save:
        csv_lines = [
            f"# Siglent {model_id} {scope_id} Option Keys",
            f"# Generated by {__package__} v{__version__} at {datetime.now().isoformat()}",
            "",
        ]
        table_md = table_to_markdown(key_table)
        with outfile.open("w") as f:
            f.write("\n".join(csv_lines))
            f.write(table_md.plain)

    raise typer.Exit()


def table_to_markdown(table: Table):
    # Temporarily remove table title and box styling
    box_temp = table.box
    title_temp = table.title
    table.box = box.MARKDOWN
    table.title = None
    # Capture table as markdown
    capcon = Console(width=120)
    with capcon.capture() as capture:
        capcon.print(table)
    # Restore table title and box styling
    table.box = box_temp
    table.title = title_temp
    # Return captured table as rich.Text
    return Text.from_ansi(capture.get())
